# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to ignore these files:
.idea/
*.iws
*.iml
*.ipr

# Visual Studio Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# REPORTES Y LOGS ESPECÍFICOS DEL PROYECTO
# ===========================================

# Reportes de pruebas
reports/
test-results/
test-output/
allure-results/
allure-report/
*.html
*.xml
junit.xml
pytest_html_report.html

# Logs
logs/
*.log
*.log.*
selenium.log
test.log
debug.log

# Screenshots y videos de pruebas fallidas
screenshots/
videos/
evidence/
test-evidence/
failed-tests/
*.png
*.jpg
*.jpeg
*.gif
*.mp4
*.avi
*.mov

# Drivers de Selenium (si los descargas manualmente)
drivers/
chromedriver
geckodriver
msedgedriver
*.exe

# CONFIGURACIONES ESPECÍFICAS
# ============================

# Archivos de configuración con datos sensibles
config/secrets.json
config/credentials.json
config/local_config.json
.secrets
credentials.txt

# Variables de entorno
.env.local
.env.development
.env.staging
.env.production

# Archivos de configuración específicos del entorno
config/local/
config/dev/
config/staging/
config/prod/

# DATOS DE PRUEBA
# ===============

# Datos de prueba generados
test-data/generated/
test-data/temp/
temp/
tmp/

# Bases de datos de prueba
*.db
*.sqlite
*.sqlite3
test.db

# Archivos CSV/JSON con datos sensibles
test-data/sensitive/
test-data/production/

# DEPENDENCIAS Y PAQUETES
# ========================

# Node modules (si usas herramientas de JS)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Bower
bower_components/

# SISTEMA OPERATIVO
# =================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# HERRAMIENTAS DE DESARROLLO
# ===========================

# Profiling
*.prof

# Benchmarking
.benchmarks/

# DOCKER
# ======
Dockerfile.local
docker-compose.override.yml
.dockerignore

# KUBERNETES
# ==========
*.yaml.local
*.yml.local

# TERRAFORM
# =========
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# ARCHIVOS TEMPORALES ESPECÍFICOS DEL PROYECTO
# =============================================

# Archivos de backup
*.bak
*.backup
*.old
*.orig

# Archivos de intercambio
*.tmp
*.temp
*.swp

# Archivos de configuración de editores
.editorconfig.local

# Archivos de métricas y análisis
metrics/
analysis/
performance/
# Cache de herramientas
.ruff_cache/

# Archivos de configuración específicos del usuario
.user.ini
user-config.json
personal-settings.json